from ray_{{ namespace }}.gen.sqlite import DBSession


class DBManager(object):

    def __init__(self):
        self._resource_classes = {}
        self._resource_types = DBSession.all_resource_types

        for resource_type in DBSession.all_resource_types:
            r_class_name = resource_type
            try:
                r_class = getattr(DBSession, r_class_name)
            except AttributeError:
                raise
            self.set_resource_class(resource_type, r_class)

    def set_resource_class(self, resource_type, resource_class):
        obj_type = resource_type.replace('-', '_').lower()
        resource_class.cm = self
        self._resource_classes[obj_type]  = resource_class

    def get_resource_class(self, resource_type):
        obj_type = resource_type.replace('-', '_').lower()
        if obj_type in self._resource_classes:
            return self._resource_classes[obj_type]

    def create_ctx(self, ctx=None):
        if not ctx:
            ctx = {
                'session': DBSession.DB()
            }
        elif 'session' not in ctx:
            ctx['session'] = DBSession.DB()

        if 'fulsh' not in ctx:
            ctx['flush'] = True

        ctx['dm'] = self

        return ctx

    def create_resource(self, ctx, obj_type, request_dict):
        ctx = self.create_ctx(ctx)
        session = ctx.get('session')

        ret = None
        res_class = self.get_resource_class(obj_type)
        request_obj = res_class.from_dict(**request_dict)
        session.add(request_obj)

        if ctx and ctx.get('flush'):
            session.commit()
            ret = request_obj.to_dict()

        #if success key would be auto populate
        session.close()
        return ret

    def read_resource(self, ctx, obj_type, id):
        ctx = self.create_ctx(ctx)
        session = ctx.get('session')

        ret = None
        res_class = self.get_resource_class(obj_type)
        res_obj = session.query(res_class).filter_by(id = id).first()
        if res_obj:
            ret = res_obj.to_dict()
        session.close()

        return ret

    def update_resource(self, ctx, obj_type, request_dict):
        ctx = self.create_ctx(ctx)
        session = ctx.get('session')

        ret = None
        res_class = self.get_resource_class(obj_type)
        id = request_dict.get('id')
        if id:
            res_obj = session.query(res_class).filter_by(id = id).first()
            if res_obj:
                #update dict value
                for k in request_dict:
                    setattr(res_obj, k, request_dict.get(k))

                if ctx and ctx.get('flush'):
                    session.commit()

                ret = res_obj.to_dict()
        session.close()

        return ret

    def list_resource(self, ctx, obj_type, filter={}):
        ctx = self.create_ctx(ctx)
        session = ctx.get('session')

        ret = None
        res_class = self.get_resource_class(obj_type)
        if filter:
            res_obj = session.query(res_class).filter_by(**filter)
        else:
            res_obj = session.query(res_class).all()
        if res_obj:
            ret = [item.to_dict() for item in res_obj]
        session.close()

        return ret

    def delete_resource(self, ctx, obj_type, id):
        ctx = self.create_ctx(ctx)
        session = ctx.get('session')

        ret = None
        res_class = self.get_resource_class(obj_type)
        res_obj = session.query(res_class).filter_by(id = id).first()
        if res_obj:
            session.delete(res_obj)
            ret = res_obj.to_dict()

            if ctx and ctx.get('flush'):
                session.commit()
            session.close()

        return ret